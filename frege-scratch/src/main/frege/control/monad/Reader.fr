package frege.control.monad.Reader where

data Reader e a = Reader { run :: e -> a }

run :: Reader e a -> e -> a
run (Reader f) x = f x
 
instance Monad (Reader e) where
    return a = Reader (\_ -> a)
    m >>= k = Reader (\r -> run (k (run m r)) r)

ask :: Reader e e
ask = Reader id

main :: [String] -> IO ()
--main _ = println $ run (ask >>= (\x -> return (x * 3))) 2
main _ = println $ run (doubleR) 2

double :: Int -> Int
double x = x + x

doubleR :: Reader Int Int
doubleR = do
    env <- ask
    return $ double env